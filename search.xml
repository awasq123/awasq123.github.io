<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Crypto 总结 (1)</title>
    <url>/2025/04/16/crypto1/</url>
    <content><![CDATA[<p>总结一下最近做过的一些比较有学习意义的密码题</p>
<h3 id="Update-1753CTF"><a href="#Update-1753CTF" class="headerlink" title="Update (1753CTF)"></a>Update (1753CTF)</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>Update your software, hardware, wetware, and everything else. Also eat your veggies.</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> CMAC</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> pkcs1_15</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG, CMAC_KEY, PUBKEY_TAG, try_read_cmac_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mac</span>(<span class="params">msg</span>):</span><br><span class="line">    cmac = CMAC.new(CMAC_KEY, ciphermod=AES)</span><br><span class="line">    cmac.oid = <span class="string">'2.16.840.1.101.3.4.2.42'</span></span><br><span class="line">    cmac.update(msg)</span><br><span class="line">    <span class="keyword">return</span> cmac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_update</span>():</span><br><span class="line">    update = json.loads(<span class="built_in">input</span>(<span class="string">'update package: '</span>))</span><br><span class="line">    n_bytes = <span class="built_in">bytes</span>.fromhex(update[<span class="string">'pubkey'</span>])</span><br><span class="line">    signature_bytes = <span class="built_in">bytes</span>.fromhex(update[<span class="string">'signature'</span>])</span><br><span class="line">    payload_bytes = <span class="built_in">bytes</span>.fromhex(update[<span class="string">'payload'</span>])</span><br><span class="line"></span><br><span class="line">    key_tag = mac(n_bytes).digest()</span><br><span class="line">    <span class="keyword">if</span> key_tag != PUBKEY_TAG:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'verification failed'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">int</span>.from_bytes(n_bytes, <span class="string">'big'</span>)</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    pubkey = RSA.construct((n, e))</span><br><span class="line">    verifier = pkcs1_15.new(pubkey)</span><br><span class="line"></span><br><span class="line">    h = mac(payload_bytes)</span><br><span class="line">    signature = signature_bytes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        verifier.verify(h, signature)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'verification failed'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'signature correct'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload_bytes == <span class="string">b'Gimmie a flag, pretty please.'</span>:</span><br><span class="line">        <span class="built_in">print</span>(FLAG)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'update succesfull'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'1. try to read cmac key'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'2. do an update'</span>)</span><br><span class="line">        choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'your choice: '</span>))</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(try_read_cmac_key())</span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">            do_update()</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span><span class="attr">"payload"</span><span class="punctuation">:</span> <span class="string">"02a9bae06574e74b0c8afa7839c215a39621428b10d3bff2736493ffb7eeca12b7bb36aee3085e040475faa0d3b3cfac85ed6bedc1caee35ad0ce42c3fa06d42f3224a267d190aada84a3b76807d266ead2b1f5e2eddc3c7772227a4dfbe894bb1d3f47cf4e5aacd653a08c36d57c07c778ab55d9aaba0c99d874eec7ddb8f28"</span><span class="punctuation">,</span> <span class="attr">"pubkey"</span><span class="punctuation">:</span> <span class="string">"babca97e73b969bd26a13a489f942c508d06774c3f246f7c2e64139932d3ad3276ece5126c4e9e1c5cc541adccf789d47d843d2ea83138810d7ac58da422f23a7e8c5d4a10cf62510eed6c060f9f01087c7ed4ba82ae95a40260b9848a7630f2d2ada3075f656f5e4b56cd94cd3bcd7ee1d8d3427336916b8f4e06207c4577d8f9cfa8bea054c54db5b39fe932d60826fc240235761be17982bb7af46d8a133db836a5b74466b81f13c4be42b76b57c36b8292e509ed35325bceba79591804e084c5caf79c661f22c09a3e5d3da5cb2b64f3e8d451becbe4ff317cf479d475e3bed24c022b3b865d13e8381579ec97ec2e0fe7474cc9db7c8c85036958b77e91"</span><span class="punctuation">,</span> <span class="attr">"signature"</span><span class="punctuation">:</span> <span class="string">"048a5520c6d1e3859d52056bc6a75fb0d9130cb29abf6bb6d186a6e89d90a2bad67969b5e54a62d80c537bd96accd038e00acd5321be551925972ac82c743a399ef442beca5232bba8dd913c53ba31ffec32b35cc5ec4d9078cae7abfe03081e57db519d9fe7199e6801dfa291fdc32f7fe2c5f79445750bc8c6cd1d0cd4469428d40ba98303005eb058baabd0f25d85a07fb0c5e196e1a5b982cf11f64409d2ab6bf66df4b1e709eb6572149d3316018af73e2cabeed7639e80f6ddc0ed18199e56873fb0cc03dc4e37b02ef8a8557969a8b05f6366c99f36ea05f384a25c81043302c7d296f12b64a43bfc55774bd095dbc529e1a29dcac4fe59b7d51ef83c"</span><span class="punctuation">}</span></span><br></pre></td></tr></table></figure></div>

<h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>该题需要向服务器提供一个json格式内容，其中包含了payload, pubkey, signature。要求提供的公钥通过mac验证后应等于PUBKEY_TAG, 并且payload和signature应满足pkcs1 v1.5(RSA)标准的数字签名的验证。过程大概就是使用AES-CMAC作认证后把得到的摘要和cmac.oid (Object Identifier, 用于标识算法类型)整合成一个特定的格式再使用RSA私钥签名。</p>
<p>由于题目给的pubkey是2048bits的，且私钥未知，也没有其他信息，所以直接从这里出发是不行的。这里的突破口在于mac函数，采用了自定义cmac.oid ，并且直接使用AES的CBC模式进行加密，同时密钥也有泄露，从而给我们伪造公钥的机会。我们可以构造一个满足mac-collision且已知分解的n，从而伪造签名。</p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>我们先通过分析示例json文件来拿到PUBKEY_TAG，以及通过try_read_cmac_key获取密钥。由于cmac的最终加密结果由最后一个块决定，且密钥已知，于是我们可以通过控制最后两个块的内容来达到mac-collision。RSA-PKCS#1 v1.5的签名填充结构为(中间用ff填充)</p>
<div class="code-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">EM</span> = <span class="number">0</span>x00 || <span class="number">0</span>x01 || PS || <span class="number">0</span>x00 || DigestInfo</span><br></pre></td></tr></table></figure></div>

<p>在这里我们的digestinfo有35bytes，因此我们至少要构造一个48bytes的n来装下这个签名(选择16的倍数是为了能够完整控制最后一个块)。CMAC流程比常规AES多了子密钥生成和padding(参考<a class="link" href="https://en.wikipedia.org/wiki/One-key_MAC">One-key MAC - Wikipedia<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)，只需稍加调整用异或处理即可。构造的n我们可以假设其有一个小素数因子p，再判断n//p=q也是素数即可，通过不断枚举在较短时间即可获得。</p>
<h4 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> CMAC</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> pkcs1_15</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s,s2n</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMAC_KEY=<span class="built_in">bytes</span>.fromhex(<span class="string">'2b7e151628aed2a6abf7158809cf4f3c'</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_subkeys</span>(<span class="params">key</span>):</span><br><span class="line">    Rb = <span class="number">0x87</span></span><br><span class="line">    block_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left_shift</span>(<span class="params">block</span>):</span><br><span class="line">        num = <span class="built_in">int</span>.from_bytes(block, <span class="string">'big'</span>) &lt;&lt; <span class="number">1</span></span><br><span class="line">        num &amp;= (<span class="number">1</span> &lt;&lt; <span class="number">128</span>) - <span class="number">1</span>  <span class="comment"># 保证128位</span></span><br><span class="line">        <span class="keyword">return</span> num.to_bytes(<span class="number">16</span>, <span class="string">'big'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">xor_rb</span>(<span class="params">block</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>.from_bytes(block, <span class="string">'big'</span>) ^ (Rb &lt;&lt; <span class="number">120</span>)).to_bytes(<span class="number">16</span>, <span class="string">'big'</span>)</span><br><span class="line"></span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    L = aes.encrypt(<span class="string">b'\x00'</span> * <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (L[<span class="number">0</span>] &amp; <span class="number">0x80</span>) == <span class="number">0</span>:</span><br><span class="line">        K1 = left_shift(L)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        K1 = xor_rb(left_shift(L))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (K1[<span class="number">0</span>] &amp; <span class="number">0x80</span>) == <span class="number">0</span>:</span><br><span class="line">        K2 = left_shift(K1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        K2 = xor_rb(left_shift(K1))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> K1, K2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mac</span>(<span class="params">msg</span>):</span><br><span class="line">    cmac = CMAC.new(CMAC_KEY, ciphermod=AES)</span><br><span class="line">    cmac.oid = <span class="string">'2.16.840.1.101.3.4.2.42'</span></span><br><span class="line">    cmac.update(msg)</span><br><span class="line">    <span class="keyword">return</span> cmac</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_good_n</span>(<span class="params">n</span>):</span><br><span class="line">    small_primes = [p <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xffff</span>) <span class="keyword">if</span> isPrime(p)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> small_primes:</span><br><span class="line">        <span class="keyword">if</span> n%p==<span class="number">0</span>:</span><br><span class="line">            q = n // p</span><br><span class="line">            <span class="keyword">if</span> isPrime(q):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">return</span> p, q, d</span><br><span class="line">                <span class="keyword">except</span> ValueError: <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_n</span>(<span class="params">tag</span>):</span><br><span class="line">    K1 = generate_subkeys(CMAC_KEY)[<span class="number">0</span>]</span><br><span class="line">    aes = AES.new(CMAC_KEY, AES.MODE_ECB)</span><br><span class="line">    second_last_block=aes.decrypt(<span class="string">b'\x00'</span>*<span class="number">16</span>)</span><br><span class="line">    last_block=strxor(aes.decrypt(tag),K1)</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        n=os.urandom(<span class="number">16</span>)</span><br><span class="line">        n+=strxor(aes.encrypt(n),second_last_block)</span><br><span class="line">        n+=last_block</span><br><span class="line">        <span class="keyword">assert</span> mac(n).digest()==tag</span><br><span class="line">        <span class="keyword">if</span> is_good_n(s2n(n)):</span><br><span class="line">            <span class="keyword">return</span> is_good_n(s2n(n))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_update</span>(<span class="params">p,q,d,payload</span>):</span><br><span class="line">    n=p*q</span><br><span class="line">    key = RSA.construct((n, e, d, p, q))</span><br><span class="line">    signer = pkcs1_15.new(key)</span><br><span class="line">    signature = signer.sign(mac(payload))</span><br><span class="line">    update = {</span><br><span class="line">        <span class="string">'payload'</span>: payload.<span class="built_in">hex</span>(),</span><br><span class="line">        <span class="string">'pubkey'</span>: <span class="built_in">hex</span>(n)[<span class="number">2</span>:],</span><br><span class="line">        <span class="string">'signature'</span>: signature.<span class="built_in">hex</span>(),</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">print</span>(json.dumps(update))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span> :</span><br><span class="line">    n_bytes=<span class="built_in">bytes</span>.fromhex(<span class="string">"babca97e73b969bd26a13a489f942c508d06774c3f246f7c2e64139932d3ad3276ece5126c4e9e1c5cc541adccf789d47d843d2ea83138810d7ac58da422f23a7e8c5d4a10cf62510eed6c060f9f01087c7ed4ba82ae95a40260b9848a7630f2d2ada3075f656f5e4b56cd94cd3bcd7ee1d8d3427336916b8f4e06207c4577d8f9cfa8bea054c54db5b39fe932d60826fc240235761be17982bb7af46d8a133db836a5b74466b81f13c4be42b76b57c36b8292e509ed35325bceba79591804e084c5caf79c661f22c09a3e5d3da5cb2b64f3e8d451becbe4ff317cf479d475e3bed24c022b3b865d13e8381579ec97ec2e0fe7474cc9db7c8c85036958b77e91"</span>)</span><br><span class="line">    n = <span class="built_in">int</span>.from_bytes(n_bytes, <span class="string">'big'</span>)</span><br><span class="line">    pubkey_tag = mac(n_bytes).digest()</span><br><span class="line">    p,q,d=generate_n(pubkey_tag)</span><br><span class="line">    target_payload = <span class="string">b'Gimmie a flag, pretty please.'</span></span><br><span class="line">    do_update(p,q,d,target_payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#example output {"payload": "47696d6d6965206120666c61672c2070726574747920706c656173652e", "pubkey": "17d0f972d8020058b631bdc17990567d3a66bf733e2513de6b8f9243e456b3564051899d9f8047fcd5d0d19be124c333", "signature": "0add9b2d16cefcce6050f912440fd72db89de69ad2efd15ddbe1ad58a39f20b3e28ca58d94d992c8ab2f17dddd76f55f"}</span></span><br></pre></td></tr></table></figure></div>

<p>手动与服务器交互输入结果即可得到flag: 1753c{now_go_jailbreak_your_cpu_658247e97fd07afc}</p>
<h3 id="Flat-Earth-squ1rrelCTF"><a href="#Flat-Earth-squ1rrelCTF" class="headerlink" title="Flat Earth (squ1rrelCTF)"></a>Flat Earth (squ1rrelCTF)</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>How can you prove something that’s not true?</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> GF, EllipticCurve, PolynomialRing</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># curve and fields</span></span><br><span class="line">p = <span class="number">7691</span></span><br><span class="line">field_size = <span class="number">641</span></span><br><span class="line">Fp = GF(field_size)</span><br><span class="line">Fq = GF(p)</span><br><span class="line">Eq = EllipticCurve(Fq, [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">Fqr = Fq[<span class="string">'r'</span>]</span><br><span class="line">r = Fqr.gen()</span><br><span class="line">Fq_2 = GF(p**<span class="number">2</span>, modulus=r**<span class="number">2</span> + <span class="number">1</span>, name=<span class="string">'v'</span>)</span><br><span class="line">v = Fq_2.gen()</span><br><span class="line">ExtEq = EllipticCurve(Fq_2, [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># set generators</span></span><br><span class="line">G1 = ExtEq([<span class="number">2693</span>, <span class="number">4312</span>])</span><br><span class="line">G2 = ExtEq(<span class="number">633</span>*v + <span class="number">6145</span>, <span class="number">7372</span>*v + <span class="number">109</span>)</span><br><span class="line"><span class="keyword">assert</span> G1.order() == field_size</span><br><span class="line"><span class="keyword">assert</span> G2.order() == field_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate toxic values</span></span><br><span class="line">tau = Fp.random_element(Fp)</span><br><span class="line">alpha = Fp.random_element(Fp)</span><br><span class="line">beta = Fp.random_element(Fp)</span><br><span class="line">gamma = Fp.random_element(Fp)</span><br><span class="line">delta = Fp.random_element(Fp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># crs</span></span><br><span class="line">CRS1 = [tau**i * G1 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">CRS2 = [tau**i * G2 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">CRSTrap1 = [alpha * G1, beta * G1, delta * G1]</span><br><span class="line">CRSTrap2 = [beta * G2, gamma * G2, delta * G2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">commit</span>(<span class="params">poly, CRS</span>):</span><br><span class="line">    coeffs = poly.<span class="built_in">list</span>()</span><br><span class="line">    degree = poly.degree()</span><br><span class="line">    com = ExtEq([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># point at infinity</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">min</span>(degree + <span class="number">1</span>, <span class="built_in">len</span>(CRS))):</span><br><span class="line">        com += coeffs[i] * CRS[i]</span><br><span class="line">    <span class="keyword">return</span> com</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">point_to_str</span>(<span class="params">point</span>):</span><br><span class="line">    <span class="keyword">if</span> point.is_zero():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"O"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"(<span class="subst">{point[<span class="number">0</span>]}</span>, <span class="subst">{point[<span class="number">1</span>]}</span>)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># convert string to point with field checks</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_to_point</span>(<span class="params">point_str</span>):</span><br><span class="line">    <span class="keyword">if</span> point_str == <span class="string">"O"</span>:</span><br><span class="line">        <span class="keyword">return</span> ExtEq([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    coords = point_str.strip(<span class="string">"()"</span>).split(<span class="string">","</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(coords) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Invalid point format"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># parse extension field point first (contains 'v')</span></span><br><span class="line">    x_str = coords[<span class="number">0</span>].strip()</span><br><span class="line">    y_str = coords[<span class="number">1</span>].strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'v'</span> <span class="keyword">in</span> x_str <span class="keyword">or</span> <span class="string">'v'</span> <span class="keyword">in</span> y_str:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x_coord = <span class="literal">None</span></span><br><span class="line">            y_coord = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'*v +'</span> <span class="keyword">in</span> x_str:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r'^-?\d+\*v \+ -?\d+$'</span>, x_str):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid extension field format: <span class="subst">{x_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">                x_parts = x_str.split(<span class="string">'*v +'</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    x_coeff1 = <span class="built_in">int</span>(x_parts[<span class="number">0</span>].strip())</span><br><span class="line">                    x_coeff2 = <span class="built_in">int</span>(x_parts[<span class="number">1</span>].strip())</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= x_coeff1 &lt; p <span class="keyword">and</span> <span class="number">0</span> &lt;= x_coeff2 &lt; p):</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">"Coefficient out of field range"</span>)</span><br><span class="line">                    x_coord = x_coeff1*v + x_coeff2</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid integer in extension field: <span class="subst">{x_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'*v'</span> <span class="keyword">in</span> x_str:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r'^-?\d+\*v$'</span>, x_str):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid extension field format: <span class="subst">{x_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">                x_parts = x_str.split(<span class="string">'*v'</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    x_coeff = <span class="built_in">int</span>(x_parts[<span class="number">0</span>].strip())</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= x_coeff &lt; p):</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">"Coefficient out of field range"</span>)</span><br><span class="line">                    x_coord = x_coeff*v</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid integer in extension field: <span class="subst">{x_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> re.<span class="keyword">match</span>(<span class="string">r'^-?\d+$'</span>, x_str):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    x_int = <span class="built_in">int</span>(x_str)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= x_int &lt; p):</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">"Value out of field range"</span>)</span><br><span class="line">                    x_coord = Fq_2(x_int)</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid integer: <span class="subst">{x_str}</span>"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f"Unrecognized format for x-coordinate: <span class="subst">{x_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'*v +'</span> <span class="keyword">in</span> y_str:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r'^-?\d+\*v \+ -?\d+$'</span>, y_str):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid extension field format: <span class="subst">{y_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">                y_parts = y_str.split(<span class="string">'*v +'</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    y_coeff1 = <span class="built_in">int</span>(y_parts[<span class="number">0</span>].strip())</span><br><span class="line">                    y_coeff2 = <span class="built_in">int</span>(y_parts[<span class="number">1</span>].strip())</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= y_coeff1 &lt; p <span class="keyword">and</span> <span class="number">0</span> &lt;= y_coeff2 &lt; p):</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">"Coefficient out of field range"</span>)</span><br><span class="line">                    y_coord = y_coeff1*v + y_coeff2</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid integer in extension field: <span class="subst">{y_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'*v'</span> <span class="keyword">in</span> y_str:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r'^-?\d+\*v$'</span>, y_str):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid extension field format: <span class="subst">{y_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">                y_parts = y_str.split(<span class="string">'*v'</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    y_coeff = <span class="built_in">int</span>(y_parts[<span class="number">0</span>].strip())</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= y_coeff &lt; p):</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">"Coefficient out of field range"</span>)</span><br><span class="line">                    y_coord = y_coeff*v</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid integer in extension field: <span class="subst">{y_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> re.<span class="keyword">match</span>(<span class="string">r'^-?\d+$'</span>, y_str):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    y_int = <span class="built_in">int</span>(y_str)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= y_int &lt; p):</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">"Value out of field range"</span>)</span><br><span class="line">                    y_coord = Fq_2(y_int)</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid integer: <span class="subst">{y_str}</span>"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f"Unrecognized format for y-coordinate: <span class="subst">{y_str}</span>"</span>)</span><br><span class="line"></span><br><span class="line">            point = ExtEq([x_coord, y_coord])</span><br><span class="line">            <span class="keyword">return</span> point</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid extension field point: <span class="subst">{point_str}</span>. Error: <span class="subst">{<span class="built_in">str</span>(e)}</span>"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (re.<span class="keyword">match</span>(<span class="string">r'^-?\d+$'</span>, x_str) <span class="keyword">and</span> re.<span class="keyword">match</span>(<span class="string">r'^-?\d+$'</span>, y_str)):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid coordinate format: (<span class="subst">{x_str}</span>, <span class="subst">{y_str}</span>)"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x_int = <span class="built_in">int</span>(x_str)</span><br><span class="line">            y_int = <span class="built_in">int</span>(y_str)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= x_int &lt; p <span class="keyword">and</span> <span class="number">0</span> &lt;= y_int &lt; p):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"Coordinate out of field range"</span>)</span><br><span class="line"></span><br><span class="line">            x_coord = Fq(x_int)</span><br><span class="line">            y_coord = Fq(y_int)</span><br><span class="line"></span><br><span class="line">            point = ExtEq([x_coord, y_coord])</span><br><span class="line">            <span class="keyword">return</span> point</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f"Invalid field point: <span class="subst">{point_str}</span>. Error: <span class="subst">{<span class="built_in">str</span>(e)}</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_proof</span>(<span class="params">L_point, R_point, Q_point, A_point, B_point, C_point</span>):</span><br><span class="line">    left_pairing = A_point.weil_pairing(B_point, field_size)</span><br><span class="line">    right_pairing = (CRSTrap1[<span class="number">0</span>].weil_pairing(CRSTrap2[<span class="number">0</span>], field_size) * </span><br><span class="line">                      C_point.weil_pairing(CRSTrap2[<span class="number">2</span>], field_size))</span><br><span class="line">    <span class="keyword">return</span> left_pairing == right_pairing</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate challenge with L, R s.t. L*R != Q</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_challenge</span>():</span><br><span class="line">    Rng = PolynomialRing(Fp, <span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create L/R polynomials</span></span><br><span class="line">    L_poly = Rng.random_element(degree=<span class="number">3</span>)</span><br><span class="line">    R_poly = Rng.random_element(degree=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ensure L*R != Q</span></span><br><span class="line">    true_Q_poly = L_poly * R_poly</span><br><span class="line">    fake_Q_poly = true_Q_poly + Rng.random_element(degree=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> fake_Q_poly == true_Q_poly:</span><br><span class="line">        fake_Q_poly = true_Q_poly + Rng.random_element(degree=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># commitments</span></span><br><span class="line">    L_commit = commit(L_poly, CRS1)</span><br><span class="line">    R_commit = commit(R_poly, CRS2)</span><br><span class="line">    Q_commit = commit(fake_Q_poly, CRS1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="string">"L"</span>: point_to_str(L_commit),</span><br><span class="line">        <span class="string">"R"</span>: point_to_str(R_commit), </span><br><span class="line">        <span class="string">"Q"</span>: point_to_str(Q_commit)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"delta :o : <span class="subst">{<span class="built_in">int</span>(delta)}</span>"</span>)</span><br><span class="line">rounds_passed = <span class="number">0</span></span><br><span class="line">total_rounds = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> rounds_passed &lt; total_rounds:</span><br><span class="line">    challenge = generate_challenge()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"\nRound <span class="subst">{rounds_passed + <span class="number">1</span>}</span>/<span class="subst">{total_rounds}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(json.dumps(challenge))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = json.loads(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse proof</span></span><br><span class="line">        A_point = str_to_point(response[<span class="string">"proof"</span>][<span class="string">"A"</span>])</span><br><span class="line">        B_point = str_to_point(response[<span class="string">"proof"</span>][<span class="string">"B"</span>])</span><br><span class="line">        C_point = str_to_point(response[<span class="string">"proof"</span>][<span class="string">"C"</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get chall commitments</span></span><br><span class="line">        L_point = str_to_point(challenge[<span class="string">"L"</span>])</span><br><span class="line">        R_point = str_to_point(challenge[<span class="string">"R"</span>])</span><br><span class="line">        Q_point = str_to_point(challenge[<span class="string">"Q"</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> verify_proof(L_point, R_point, Q_point, A_point, B_point, C_point):</span><br><span class="line">            rounds_passed += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"Verified! <span class="subst">{rounds_passed}</span>/<span class="subst">{total_rounds}</span>"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Stupid :)"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Error: <span class="subst">{e}</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rounds_passed &gt;= total_rounds:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"flag.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        flag = f.read().strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"Flag: <span class="subst">{flag}</span>"</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>背景知识是zk-SNARKs (Zero-Knowledge Succinct Non-interactive Argument of Knowledge)。我也是第一次接触零知识证明的题目，花了很多时间上网搜寻相关资料学习，只有一些浅薄的理解，如有疏漏敬请指出。</p>
<p>zk-SNARKs的特点是简洁，无需交互。其大致过程为先将程序转化为算术电路，再进而转化为R1CS，最后到多项式，具体过程可以参考这篇文章 (<a class="link" href="https://w3hitchhiker.mirror.xyz/sjtV-I7l6_XY9uVkykvFRRAriAAusTLFq8s-gCGdviE">零知识 QAP 问题的转化 — W3.Hitchhiker<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)。</p>
<p>然后我们开始在椭圆曲线上对该多项式作承诺。首先我们需要一串trusted setup的CRS (Common Reference String), 它包括一组参数，例如在本题中是</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">CRS1 = [tau**i * G1 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">CRS2 = [tau**i * G2 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br></pre></td></tr></table></figure></div>

<p>供所有人共享，但是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.029ex;" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.005ex" role="img" focusable="false" viewBox="0 -431 517 444"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></svg></mjx-container>是保密的。本题中还留下了CRS Trapdoor，成为了解题的一个要点。</p>
<p>假设承诺者有多项式</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.69ex" height="2.61ex" role="img" focusable="false" viewBox="0 -903.7 15774.9 1153.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3233.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4199.1,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(4421.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(5421.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6387.1,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mi" transform="translate(6387.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7181.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(8181.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9147.1,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="msup" transform="translate(9147.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(10377.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(11378.1,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(12772.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(13772.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(14752.2,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="msup" transform="translate(14752.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,413) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g></svg></mjx-container></p>
<p>他通过 CRS 中的点，计算如下承诺</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="59.128ex" height="2.61ex" role="img" focusable="false" viewBox="0 -903.7 26134.5 1153.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1037.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2093.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(2371.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(3337.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mi" transform="translate(3615.1,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(4623.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(5623.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(5901.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(6867.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(7145.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(7423.1,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="mo" transform="translate(7940.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mi" transform="translate(8218.1,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(9226.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(10226.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(10504.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(11470.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(11748.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msup" transform="translate(12026.1,0)"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="mn" transform="translate(604,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(13033.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mi" transform="translate(13311.7,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(14319.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(15320.1,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(16714.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(17714.5,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(17992.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mo" transform="translate(18972.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(19250.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msup" transform="translate(19528.2,0)"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="mi" transform="translate(604,413) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mo" transform="translate(20549.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mi" transform="translate(20827.9,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(21891.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(22947.5,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(23225.5,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(23775.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(24164.5,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="mo" transform="translate(24681.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(25070.5,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mi" transform="translate(25348.5,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></svg></mjx-container></p>
<p>也就是将 <code>f(τ)</code> 作为数值映射成椭圆曲线上的点。</p>
<p>接下来是验证承诺，需要用到椭圆曲线双线性配对(这个性质很重要!)，这里就不展开了，更多有关知识可以参考<a class="link" href="https://zhuanlan.zhihu.com/p/574383126">零知识证明前传-什么是多项式承诺？ - 蔡庆丰的文章 - 知乎<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h4><p>这道题乍一看很复杂，背景知识也很深奥，但其实解决这道题并不需要用多么高深的思路，只需要关注到题中验证证明的方式以及weil_pairing双线性配对的性质。</p>
<p>首先我们先对题目做一下简化，很多函数其实不用看。先观察generate_challenge函数，使用LPCP承诺，但是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.364ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8559 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(681,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1070,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1642,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2253.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(2975.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(3734.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4123.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4695.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5362.2,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mi" transform="translate(6418,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(7209,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7598,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(8170,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> , 这也对应了题目中“如何证明不正确的东西”。但是我们再观察verify_proof函数，成立条件为</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="34.21ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15121 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(466,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(855,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1605,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2049.7,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(2808.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3475.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4531.2,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(4997.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5386.2,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mi" transform="translate(6026.2,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(6812.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7312.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7756.9,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mi" transform="translate(8322.9,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(9108.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9608.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10220.1,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(10942.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(11408.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11797.3,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(12557.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(13002,0)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mi" transform="translate(13446,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(14232,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(14732,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>发现与L,R,Q并无关系，我们只需要构造特定的A,B,C满足条件即可在所有轮次中使用。</p>
<p>首先我们可以先构造<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="28.387ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 12547.1 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2083.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(2846.6,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(3846.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(4883.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5939.1,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(6702.1,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(7702.1,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(8739.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(9795.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(10538.9,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(11261.1,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(12047.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>, 再利用双线性配对的性质对条件进行化简</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.983ex" height="2.647ex" role="img" focusable="false" viewBox="0 -920 12810.7 1170"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(466,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(855,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(1618,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2062.7,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(2825.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3492.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4548.2,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(5014.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5403.2,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(6189.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6689.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7133.9,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(7919.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(8419.9,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mi" transform="translate(640,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(1206,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1984,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(2505,0)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11254.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(12310.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p>
<p>即</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.575ex;" xmlns="http://www.w3.org/2000/svg" width="22.512ex" height="4.699ex" role="img" focusable="false" viewBox="0 -1381 9950.2 2077"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mi" transform="translate(640,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(1428.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2428.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(2949.4,0)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><g data-mml-node="mo" transform="translate(3671.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4727,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(5227,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5671.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(6470.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(7526.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(8304.2,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mi" transform="translate(640,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g><g data-mml-node="mi" transform="translate(601,-686)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g><rect width="1406" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<p>本题的vulnerability在于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.745ex" height="2.061ex" role="img" focusable="false" viewBox="0 -717 2539.3 911"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(640,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1084.7,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(1650.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2095.3,0)"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g></g></g></svg></mjx-container>都是定义在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.627ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3813 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(786,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(1535,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1924,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(3424,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>上的元素，则<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.571ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5556.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1743.6,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(2529.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(3278.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3667.6,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(5167.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>, 这是一个很小的有限域，安全性没有保障，可以直接bruteforce。</p>
<p>题目给的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.005ex" height="1.645ex" role="img" focusable="false" viewBox="0 -717 444 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"></path></g></g></g></svg></mjx-container> 其实并不需要用上，我们只需要不断枚举k验证服务器响应，直到出现Verified!就尝试成功了，再发送31次挑战即可。</p>
<h4 id="解题代码-1"><a href="#解题代码-1" class="headerlink" title="解题代码"></a>解题代码</h4><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">SERVER_HOST = <span class="string">'4.246.225.36'</span></span><br><span class="line">SERVER_PORT = <span class="number">5006</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">7691</span></span><br><span class="line">field_size = <span class="number">641</span></span><br><span class="line">Fp = GF(field_size)</span><br><span class="line">Fq = GF(p)</span><br><span class="line">Eq = EllipticCurve(Fq, [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">Fqr = Fq[<span class="string">'r'</span>]</span><br><span class="line">r = Fqr.gen()</span><br><span class="line">Fq_2 = GF(p**<span class="number">2</span>, modulus=r**<span class="number">2</span> + <span class="number">1</span>, name=<span class="string">'v'</span>)</span><br><span class="line">v = Fq_2.gen()</span><br><span class="line">ExtEq = EllipticCurve(Fq_2, [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">G1 = ExtEq([<span class="number">2693</span>, <span class="number">4312</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">point_to_str</span>(<span class="params">point</span>):</span><br><span class="line">    <span class="keyword">if</span> point.is_zero():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"O"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"(<span class="subst">{point[<span class="number">0</span>]}</span>, <span class="subst">{point[<span class="number">1</span>]}</span>)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oracle</span>(<span class="params">io,i</span>):</span><br><span class="line">    A=ExtEq([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">    B=ExtEq([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">    C=i*G1</span><br><span class="line">    io.recvall()</span><br><span class="line">    challenge = io.recvline().decode().strip()</span><br><span class="line">    response = {</span><br><span class="line">            <span class="string">"proof"</span>: {</span><br><span class="line">            <span class="string">"A"</span>: point_to_str(A),</span><br><span class="line">            <span class="string">"B"</span>: point_to_str(B),</span><br><span class="line">            <span class="string">"C"</span>: point_to_str(C)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    payload = json.dumps(response).encode()</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    res = io.recvline()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">io = remote(SERVER_HOST, SERVER_PORT)</span><br><span class="line">io.recvuntil(<span class="string">b"delta :o : "</span>)</span><br><span class="line">delta = io.recvline().decode().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">641</span>):</span><br><span class="line">    res=oracle(io,i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b"Stupid"</span> <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Found!"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"<span class="subst">{i = }</span>"</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">    oracle(io, i)</span><br><span class="line"><span class="built_in">print</span>(r.recvline())</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>crypto</tag>
        <tag>ctf</tag>
        <tag>cmac</tag>
        <tag>zk-SNARKs</tag>
      </tags>
  </entry>
  <entry>
    <title>Wolvctf-rev wp</title>
    <url>/2025/03/24/Wolvctf-rev/</url>
    <content><![CDATA[<p>第一篇文章，简单记录一下WolvCTF 2025</p>
<p>作为一名密码手，这次尝试了一下逆向的题目，还是有不少收获的。其中Vinyl比较可惜吧，比赛时没关注到题目文件的更新（有一些重要提示），导致一直卡在最后一步。</p>
<p>接下来对几道题目进行一下复盘。</p>
<h3 id="CrackMeEXE"><a href="#CrackMeEXE" class="headerlink" title="CrackMeEXE"></a>CrackMeEXE</h3><p><a href="/files/chall.exe">chall.exe</a></p>
<p>拖入IDA发现函数很少，检查一下</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20011707.png" alt="Test"></p>
<p>使用upx脱壳</p>
<p>审计代码，逻辑是用户输入密码，然后调用加密过的unk_140005080函数</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20004251.png" alt="Test"></p>
<p>找出该内存处对应的139字节，并找到加密逻辑</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20004442.png" alt="Test"></p>
<p>发现设置了一个固定种子并进行异或，则我们按照相同的逻辑解密</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> encrypted[] = {</span><br><span class="line">        <span class="number">0x12</span>, <span class="number">0xA7</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0xF3</span>, <span class="number">0xB0</span>, <span class="number">0xC6</span>, <span class="number">0xB6</span>, <span class="number">0x7A</span>, <span class="number">0x95</span>, <span class="number">0x5D</span>, <span class="number">0x7F</span>, <span class="number">0x8B</span>, <span class="number">0xED</span>, <span class="number">0x96</span>, <span class="number">0xE9</span>,</span><br><span class="line">        <span class="number">0x45</span>, <span class="number">0x4D</span>, <span class="number">0x10</span>, <span class="number">0xCF</span>, <span class="number">0x7C</span>, <span class="number">0xDD</span>, <span class="number">0xF1</span>, <span class="number">0x31</span>, <span class="number">0xDA</span>, <span class="number">0xF4</span>, <span class="number">0xFE</span>, <span class="number">0x8A</span>, <span class="number">0xEA</span>, <span class="number">0x36</span>, <span class="number">0xBD</span>, <span class="number">0x22</span>,</span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0x63</span>, <span class="number">0xCB</span>, <span class="number">0x27</span>, <span class="number">0x8A</span>, <span class="number">0x4F</span>, <span class="number">0xC6</span>, <span class="number">0xDF</span>, <span class="number">0xB2</span>, <span class="number">0x93</span>, <span class="number">0x10</span>, <span class="number">0x31</span>, <span class="number">0xED</span>, <span class="number">0x92</span>, <span class="number">0xC6</span>, <span class="number">0x49</span>,</span><br><span class="line">        <span class="number">0xA4</span>, <span class="number">0x62</span>, <span class="number">0x7B</span>, <span class="number">0xFC</span>, <span class="number">0x46</span>, <span class="number">0xA3</span>, <span class="number">0x3A</span>, <span class="number">0x15</span>, <span class="number">0x50</span>, <span class="number">0x61</span>, <span class="number">0x5C</span>, <span class="number">0xC9</span>, <span class="number">0x05</span>, <span class="number">0x9C</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>,</span><br><span class="line">        <span class="number">0xF1</span>, <span class="number">0xD0</span>, <span class="number">0x80</span>, <span class="number">0x98</span>, <span class="number">0x68</span>, <span class="number">0x07</span>, <span class="number">0x82</span>, <span class="number">0xC5</span>, <span class="number">0x36</span>, <span class="number">0x54</span>, <span class="number">0x62</span>, <span class="number">0x37</span>, <span class="number">0xF9</span>, <span class="number">0xB4</span>, <span class="number">0xA7</span>, <span class="number">0x41</span>,</span><br><span class="line">        <span class="number">0x46</span>, <span class="number">0x14</span>, <span class="number">0xCC</span>, <span class="number">0xD1</span>, <span class="number">0x0D</span>, <span class="number">0x9B</span>, <span class="number">0x1F</span>, <span class="number">0xB8</span>, <span class="number">0xBF</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0xEC</span>, <span class="number">0x50</span>, <span class="number">0x1C</span>, <span class="number">0x18</span>, <span class="number">0x5D</span>,</span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x61</span>, <span class="number">0xF1</span>, <span class="number">0x81</span>, <span class="number">0xB5</span>, <span class="number">0xC3</span>, <span class="number">0xA7</span>, <span class="number">0x38</span>, <span class="number">0xCB</span>, <span class="number">0xD6</span>, <span class="number">0xA0</span>, <span class="number">0x14</span>, <span class="number">0x8A</span>, <span class="number">0x2C</span>, <span class="number">0xF9</span>, <span class="number">0x66</span>,</span><br><span class="line">        <span class="number">0xB5</span>, <span class="number">0x39</span>, <span class="number">0xB9</span>, <span class="number">0xE8</span>, <span class="number">0xAA</span>, <span class="number">0xA7</span>, <span class="number">0x4C</span>, <span class="number">0x6A</span>, <span class="number">0xE3</span>, <span class="number">0x4C</span>, <span class="number">0x55</span>, <span class="number">0x43</span>, <span class="number">0x0C</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0xBF</span>,</span><br><span class="line">        <span class="number">0x63</span>, <span class="number">0x07</span>, <span class="number">0xF9</span>, <span class="number">0xE2</span>, <span class="number">0xDF</span>, <span class="number">0xF3</span>, <span class="number">0xF5</span>, <span class="number">0xFD</span>, <span class="number">0x6A</span>, <span class="number">0x3C</span>, <span class="number">0x00</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    srand(<span class="number">0x3419</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> decrypted[<span class="keyword">sizeof</span>(encrypted)];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(encrypted); i++) {</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> key = rand();    </span><br><span class="line">        <span class="type">char</span> byte_key = key ; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        decrypted[i] = encrypted[i] ^ byte_key;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Decrypted Data (%zu bytes):\n"</span>, <span class="keyword">sizeof</span>(decrypted));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(decrypted); i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>, decrypted[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    FILE* fp = fopen(<span class="string">"decrypted.bin"</span>, <span class="string">"wb"</span>);</span><br><span class="line">    fwrite(decrypted, <span class="number">1</span>, <span class="keyword">sizeof</span>(decrypted), fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>得到二进制文件，再将其拖进cutter观察其逻辑</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20005054.png" alt="Test"></p>
<p>发现是将uStack_10作为密钥异或栈上存储的值并与用户输入值进行比较，按照地址顺序解密可得</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">encrypted = [</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x0f</span>, <span class="number">0x15</span>, <span class="number">0x01</span>, <span class="number">0x1d</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x56</span>, <span class="number">0x15</span>, <span class="number">0x52</span>, <span class="number">0x03</span>, <span class="number">0x39</span>, <span class="number">0x35</span>, <span class="number">0x52</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x59</span>, <span class="number">0x11</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>]</span><br><span class="line">flag = <span class="built_in">bytes</span>([encrypted[i] ^ key[i % <span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)])</span><br><span class="line"><span class="built_in">print</span>(flag.decode(errors=<span class="string">'ignore'</span>))  </span><br><span class="line"></span><br><span class="line"><span class="comment">#wctf{Ann0y3d_Y3t?}</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h3><p><a href="/files/office">office</a></p>
<p>一道很有意思的题目</p>
<p>首先拖进IDA审计代码,发现程序一开始调用了urandom给byte_4040A9赋了一个随机值,同时把这个值也赋给byte_4040AA。</p>
<p>然后进入打工环节。余额储存在dword_404080,每天的初始工资储存在dword_404084。</p>
<p>主要有三个功能1，2，3，1是调用sub_4011C6，这是最关键的函数，通过将byte_4040AA与byte_404088到byte_40408E之间的7个字节按位与，如果不为0则输出一些语句，可以通过这些输出来确定byte_4040AA的一些位,最后会将byte_4040AA与新余额异或并赋值给自己。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20002815.png" alt="Test"></p>
<p>2是改变自己的工资。3是辞职并且判断257 * (unsigned __int8)byte_4040A9 == dword_404080,如果成立则输出flag。</p>
<p>观察2进制文件得到余额的初始值是1337，工资的初始值是10</p>
<p>byte_404088到byte_40408E的字节分别是</p>
<blockquote>
<p>0000 1010</p>
<p>0001 0110</p>
<p>0001 1000</p>
<p>0010 1000</p>
<p>1010 1000</p>
<p>0110 0000</p>
<p>0000 0001</p>
</blockquote>
<p>接下来我们可以通过不断的调用函数1来获取输出，目的是获取初始的byte_4040AA，进而获取byte_4040A9。</p>
<p>因为所有过程都是可以预知的，并且按理来说方程是无限的，一定可以解出byte_4040AA</p>
<p>进入实战，我挑选了一次运气比较好的初始值使得我可以仅通过一次调用就获取byte_4040AA</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20003011.png" alt="Test"></p>
<p>可以看到只有三条语句输出，这已经可以确定byte_4040AA的所有位，即0100 0101</p>
<p>那么(unsigned __int8)byte_4040A9即为69</p>
<p>则我们让余额涨到257*69=17733即可，计算出还差16386，改变工资后再工作一天，辞职结束!</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20003347.png" alt="Test"></p>
<h3 id="AngerIssues"><a href="#AngerIssues" class="headerlink" title="AngerIssues"></a>AngerIssues</h3><p><a href="/files/angerissue">angerissue</a></p>
<p>拖入ida初步查看，可以看到main函数调用了checks函数，而checks函数调用了一堆funci函数。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20163818.png" alt="Test"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20163827.png" alt="Test"></p>
<p>且每个函数都执行一些简单的比较功能</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20163108.png" alt="Test"></p>
<p>显然不能手动分析，使用自动分析工具angr</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">"./angerissue"</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_size = <span class="number">60</span>  </span><br><span class="line">flag_chars = [claripy.BVS(<span class="string">f'flag_<span class="subst">{i}</span>'</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(input_size)]</span><br><span class="line">flag = claripy.Concat(*flag_chars + [claripy.BVV(<span class="string">b'\n'</span>)]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">state = proj.factory.full_init_state(</span><br><span class="line">    args=[<span class="string">"./program"</span>],</span><br><span class="line">    stdin=flag</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag_chars:</span><br><span class="line">    state.solver.add(c &gt;= <span class="number">0x20</span>, c &lt;= <span class="number">0x7E</span>)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simulation_manager(state)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Yay! You did it!"</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">simgr.explore(find=is_successful)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    solution = solution_state.solver.<span class="built_in">eval</span>(flag, cast_to=<span class="built_in">bytes</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"[+] Found solution: <span class="subst">{solution.decode()}</span>"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"[-] No solution found."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#wctf{1_h0p3_y0u_u53d_ANGR_f0r_th15_0r_y0U_w0uLd_b3_a_duMMy}</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Vinyl"><a href="#Vinyl" class="headerlink" title="Vinyl"></a>Vinyl</h3><p><a href="/files/vinyl">vinyl</a></p>
<p>一道迷宫的题目</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20164336.png" alt="Test"></p>
<p>用户输入作为迷宫的操作，sub_1C48是主要验证逻辑。而sub_1ED4是后面更新后的文件加入的函数，主要作用是限制了一些步数处的操作，防止多解。</p>
<p>先来分析主要的迷宫函数</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20165036.png" alt="Test"></p>
<p>我愿称之为“双面重力迷宫”。不妨假设有个小人在其中移动。</p>
<p>可以看到有三个坐标,dword_5020,dword_5024,dword_5028。分别对应面的编号和位置，可以将5024看作y坐标，5028看作x坐标。迷宫单面大小是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.291ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 3222.4 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(2222.4,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>  (bytes)，其中小人现在的位置用字符’X’表示，障碍用’#’表示。用户输入的每一字节按照2bits分为四组，分别对应一次操作 (可能是0,1,2,3)，一共有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.57ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 5556 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(2222.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(3000.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4056,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container> 次操作。通过分析sub_1A8A发现四种操作分别是</p>
<blockquote>
<p>3: RL 背面顺时针旋转（迷宫本身），当前面逆时针旋转（迷宫本身），小人不翻面且坐标跟随着一块旋转。</p>
<p>2: VF 正面和背面的上下翻转（迷宫本身），小人翻面且坐标上下翻转</p>
<p>1: HF  迷宫本身不动，小人翻面且坐标左右翻转</p>
<p>0: RR 当前面顺时针旋转（迷宫本身），背面逆时针旋转（迷宫本身），小人不翻面且坐标跟随着一块旋转。</p>
</blockquote>
<p>做完这些操作之后后面都要跟上一步“重力作用”，即y坐标一直增加直到遇见障碍物。</p>
<p>迷宫构造大致如下（有点吓人）</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20171511.png" alt="Test"></p>
<p>接下来正式进入路径寻找环节。</p>
<p>首先其实提取文件中迷宫数据可以发现除了’#’作为障碍物，’.’作为路径意外，还有‘@’，这个字符的作用在题目中其实并没有说明，但实际上是对最终走到出口的正确路径的提示。</p>
<p>同时还有一个sub_1229函数</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20171920.png" alt="Test"></p>
<p>发现每走4步sub_1C48会调用一次该函数对目前的坐标进行验证，可以看作“存档点”。一共有8个（最后一个是终点）</p>
<blockquote>
<p>CHECKPOINTS = [</p>
<p>    [0, 28, 34],</p>
<p>    [0, 35, 32],</p>
<p>    [1, 26, 15],</p>
<p>    [0, 20, 33],</p>
<p>    [1, 31, 17],</p>
<p>    [0, 60, 89],</p>
<p>    [0, 46, 51],</p>
<p>    [0, 44, 85]</p>
<p>]</p>
</blockquote>
<p>在更新题目文件之前所有有用信息就到此结束了，而我当时选择的bruteforce每四个字节，却得到了多组可能路径，并且由于枚举空间确实有点大（<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container>左右），最后有点可惜没有做出来（没看discord，题目文件更新了:(</p>
<p>而之前提到的sub_1ED4函数就解决了这个问题，它直接告诉了我们flag中的许多字符，使得每两个存档点之间（4个字节）只有一个或者两个字节未知（<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.119ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 936.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container>），完全可以通过bruteforce做出来</p>
<p>接下来是我实现迷宫的C代码</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 96</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STEPS 16</span></span><br><span class="line"><span class="type">int</span> state[<span class="number">3</span>] = { <span class="number">0</span>,<span class="number">48</span>,<span class="number">48</span> };<span class="comment">//初始状态</span></span><br><span class="line"><span class="type">int</span> state_copy[<span class="number">3</span>] = { <span class="number">0</span> };</span><br><span class="line"><span class="type">int</span> temp[<span class="number">2</span>][N * N] = { <span class="number">0</span> };</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> maze[<span class="number">2</span>][N*N] ={};<span class="comment">//迷宫数据，太大了不放进来</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺时针旋转90度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rotate_clockwise</span><span class="params">(<span class="type">int</span> c)</span> {</span><br><span class="line">    <span class="type">int</span> temp[N*N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            temp[j*N+N - <span class="number">1</span> - i] = maze[c][i*N+j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            maze[c][i*N+j] = temp[i*N+j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆时针旋转90度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rotate_counterclockwise</span><span class="params">(<span class="type">int</span> c)</span> {</span><br><span class="line">    <span class="type">int</span> temp[N*N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            temp[(N - <span class="number">1</span> - j)*N+i] = maze[c][i*N+j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            maze[c][i*N+j] = temp[i*N+j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下翻转</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">flip_vertical</span><span class="params">(<span class="type">int</span> c)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N / <span class="number">2</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            <span class="type">int</span> temp = maze[c][i*N+j];</span><br><span class="line">            maze[c][i*N+j] = maze[c][(N - <span class="number">1</span> - i)*N+j];</span><br><span class="line">            maze[c][(N - <span class="number">1</span> - i)*N+j] = temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左右翻转</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">flip_horizontal</span><span class="params">(<span class="type">int</span> c)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N / <span class="number">2</span>; j++) {</span><br><span class="line">            <span class="type">int</span> temp = maze[c][i*N+j];</span><br><span class="line">            maze[c][i*N+j] = maze[c][i*N+N - <span class="number">1</span> - j];</span><br><span class="line">            maze[c][i*N+N - <span class="number">1</span> - j] = temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印矩阵</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_matrix</span><span class="params">(<span class="type">int</span> state[<span class="number">3</span>])</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">96</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">96</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (i ==state[<span class="number">1</span>] &amp;&amp; j == state[<span class="number">2</span>]) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\033[31mX\033[0m"</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (maze[state[<span class="number">0</span>]][i * <span class="number">96</span> + j] == <span class="number">35</span>) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (maze[state[<span class="number">0</span>]][i * <span class="number">96</span> + j] == <span class="number">46</span>) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] == <span class="number">35</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> choice, <span class="type">int</span> state[<span class="number">3</span>])</span> {</span><br><span class="line">    <span class="keyword">if</span> (choice == <span class="number">0</span>) {</span><br><span class="line">        rotate_clockwise(state[<span class="number">0</span>]);</span><br><span class="line">        rotate_counterclockwise(<span class="number">1</span> - state[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> temp = state[<span class="number">1</span>];</span><br><span class="line">        state[<span class="number">1</span>] = state[<span class="number">2</span>];</span><br><span class="line">        state[<span class="number">2</span>] = <span class="number">95</span> - temp;</span><br><span class="line">        <span class="keyword">while</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] != <span class="number">35</span>) {</span><br><span class="line">            state[<span class="number">1</span>]++;</span><br><span class="line">        }</span><br><span class="line">        state[<span class="number">1</span>]--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">3</span>) {</span><br><span class="line">        rotate_clockwise(<span class="number">1</span> - state[<span class="number">0</span>]);</span><br><span class="line">        rotate_counterclockwise(state[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> temp = state[<span class="number">2</span>];</span><br><span class="line">        state[<span class="number">2</span>] = state[<span class="number">1</span>];</span><br><span class="line">        state[<span class="number">1</span>] = <span class="number">95</span> - temp;</span><br><span class="line">        <span class="keyword">while</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] != <span class="number">35</span>) {</span><br><span class="line">            state[<span class="number">1</span>]++;</span><br><span class="line">        }</span><br><span class="line">        state[<span class="number">1</span>]--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">1</span>) {</span><br><span class="line">        state[<span class="number">0</span>] = <span class="number">1</span> - state[<span class="number">0</span>];</span><br><span class="line">        state[<span class="number">2</span>] = <span class="number">95</span> - state[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">while</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] != <span class="number">35</span>) {</span><br><span class="line">            state[<span class="number">1</span>]++;</span><br><span class="line">        }</span><br><span class="line">        state[<span class="number">1</span>]--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>) {</span><br><span class="line">        flip_vertical(state[<span class="number">0</span>]);</span><br><span class="line">        flip_vertical(<span class="number">1</span> - state[<span class="number">0</span>]);</span><br><span class="line">        state[<span class="number">0</span>] = <span class="number">1</span> - state[<span class="number">0</span>];</span><br><span class="line">        state[<span class="number">1</span>] = <span class="number">95</span> - state[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] != <span class="number">35</span>) {</span><br><span class="line">            state[<span class="number">1</span>]++;</span><br><span class="line">        }</span><br><span class="line">        state[<span class="number">1</span>]--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] == <span class="number">35</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">func_num</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">    <span class="keyword">if</span> (func(num &gt;&gt; <span class="number">6</span>, state) || func((num &lt;&lt; <span class="number">2</span>) % <span class="number">256</span> &gt;&gt; <span class="number">6</span>, state) || func((num &lt;&lt; <span class="number">4</span>) % <span class="number">256</span> &gt;&gt; <span class="number">6</span>, state) || func((num &lt;&lt; <span class="number">6</span>) % <span class="number">256</span> &gt;&gt; <span class="number">6</span>, state)) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">brute_force_maze</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">32</span>; i &lt; <span class="number">128</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">32</span>; j &lt; <span class="number">128</span>; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">                    maze[<span class="number">0</span>][i * N + j] = temp[<span class="number">0</span>][i * N + j];</span><br><span class="line">                    maze[<span class="number">1</span>][i * N + j] = temp[<span class="number">1</span>][i * N + j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">                state[i] = state_copy[i];</span><br><span class="line">            }</span><br><span class="line">            func_num(<span class="number">49</span>);</span><br><span class="line">            func_num(i);</span><br><span class="line">            func_num(<span class="number">49</span>);</span><br><span class="line">            func_num(j);</span><br><span class="line">            <span class="keyword">if</span> (state[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; state[<span class="number">1</span>] == <span class="number">20</span> &amp;&amp; state[<span class="number">2</span>] == <span class="number">33</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c %c %c %c\n"</span>,<span class="number">49</span>,i,<span class="number">49</span>, j);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"end"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    <span class="comment">//print_matrix(state);</span></span><br><span class="line">    <span class="type">int</span> test[] = {<span class="string">'w'</span>,<span class="string">'c'</span>,<span class="string">'t'</span>,<span class="string">'f'</span>,<span class="string">'{'</span>,<span class="string">'$'</span>,<span class="string">'c'</span>,<span class="string">'r'</span>,<span class="string">'@'</span>,<span class="string">'t'</span>,<span class="string">'c'</span>,<span class="string">'H'</span>};</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) {</span><br><span class="line">        func_num(test[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            temp[<span class="number">0</span>][i * N + j] = maze[<span class="number">0</span>][i * N + j];</span><br><span class="line">            temp[<span class="number">1</span>][i * N + j] = maze[<span class="number">1</span>][i * N + j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">        state_copy[i] = state[i];</span><br><span class="line">    }</span><br><span class="line">    brute_force_maze();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//运行结果： 1 - 1 ;</span></span><br></pre></td></tr></table></figure></div>

<p>然后直接对每两个存档点之间暴力枚举即可（例如以上就是枚举第3-4个存档点之间字节）</p>
<p>最终得到wctf{$cr@tcH1-1;K3-4-1337~c47-2}</p>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
</search>
