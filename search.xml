<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Wolvctf-re wp</title>
    <url>/2025/03/24/Wolvctf-re/</url>
    <content><![CDATA[<p>第一篇文章，简单记录一下WolvCTF 2025</p>
<p>作为一名密码手，这次尝试了一下逆向的题目，还是有不少收获的。其中Vinyl比较可惜吧，比赛时没关注到题目文件的更新（有一些重要提示），导致一直卡在最后一步。</p>
<p>接下来对几道题目进行一下复盘。</p>
<h3 id="CrackMeEXE"><a href="#CrackMeEXE" class="headerlink" title="CrackMeEXE"></a>CrackMeEXE</h3><p>拖入IDA发现函数很少，检查一下</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20011707.png" alt="Test"></p>
<p>使用upx脱壳</p>
<p>审计代码，逻辑是用户输入密码，然后调用加密过的unk_140005080函数</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20004251.png" alt="Test"></p>
<p>找出该内存处对应的139字节，并找到加密逻辑</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20004442.png" alt="Test"></p>
<p>发现设置了一个固定种子并进行异或，则我们按照相同的逻辑解密</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> encrypted[] = {</span><br><span class="line">        <span class="number">0x12</span>, <span class="number">0xA7</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0xF3</span>, <span class="number">0xB0</span>, <span class="number">0xC6</span>, <span class="number">0xB6</span>, <span class="number">0x7A</span>, <span class="number">0x95</span>, <span class="number">0x5D</span>, <span class="number">0x7F</span>, <span class="number">0x8B</span>, <span class="number">0xED</span>, <span class="number">0x96</span>, <span class="number">0xE9</span>,</span><br><span class="line">        <span class="number">0x45</span>, <span class="number">0x4D</span>, <span class="number">0x10</span>, <span class="number">0xCF</span>, <span class="number">0x7C</span>, <span class="number">0xDD</span>, <span class="number">0xF1</span>, <span class="number">0x31</span>, <span class="number">0xDA</span>, <span class="number">0xF4</span>, <span class="number">0xFE</span>, <span class="number">0x8A</span>, <span class="number">0xEA</span>, <span class="number">0x36</span>, <span class="number">0xBD</span>, <span class="number">0x22</span>,</span><br><span class="line">        <span class="number">0xBF</span>, <span class="number">0x63</span>, <span class="number">0xCB</span>, <span class="number">0x27</span>, <span class="number">0x8A</span>, <span class="number">0x4F</span>, <span class="number">0xC6</span>, <span class="number">0xDF</span>, <span class="number">0xB2</span>, <span class="number">0x93</span>, <span class="number">0x10</span>, <span class="number">0x31</span>, <span class="number">0xED</span>, <span class="number">0x92</span>, <span class="number">0xC6</span>, <span class="number">0x49</span>,</span><br><span class="line">        <span class="number">0xA4</span>, <span class="number">0x62</span>, <span class="number">0x7B</span>, <span class="number">0xFC</span>, <span class="number">0x46</span>, <span class="number">0xA3</span>, <span class="number">0x3A</span>, <span class="number">0x15</span>, <span class="number">0x50</span>, <span class="number">0x61</span>, <span class="number">0x5C</span>, <span class="number">0xC9</span>, <span class="number">0x05</span>, <span class="number">0x9C</span>, <span class="number">0xA7</span>, <span class="number">0xFF</span>,</span><br><span class="line">        <span class="number">0xF1</span>, <span class="number">0xD0</span>, <span class="number">0x80</span>, <span class="number">0x98</span>, <span class="number">0x68</span>, <span class="number">0x07</span>, <span class="number">0x82</span>, <span class="number">0xC5</span>, <span class="number">0x36</span>, <span class="number">0x54</span>, <span class="number">0x62</span>, <span class="number">0x37</span>, <span class="number">0xF9</span>, <span class="number">0xB4</span>, <span class="number">0xA7</span>, <span class="number">0x41</span>,</span><br><span class="line">        <span class="number">0x46</span>, <span class="number">0x14</span>, <span class="number">0xCC</span>, <span class="number">0xD1</span>, <span class="number">0x0D</span>, <span class="number">0x9B</span>, <span class="number">0x1F</span>, <span class="number">0xB8</span>, <span class="number">0xBF</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0xEC</span>, <span class="number">0x50</span>, <span class="number">0x1C</span>, <span class="number">0x18</span>, <span class="number">0x5D</span>,</span><br><span class="line">        <span class="number">0x57</span>, <span class="number">0x61</span>, <span class="number">0xF1</span>, <span class="number">0x81</span>, <span class="number">0xB5</span>, <span class="number">0xC3</span>, <span class="number">0xA7</span>, <span class="number">0x38</span>, <span class="number">0xCB</span>, <span class="number">0xD6</span>, <span class="number">0xA0</span>, <span class="number">0x14</span>, <span class="number">0x8A</span>, <span class="number">0x2C</span>, <span class="number">0xF9</span>, <span class="number">0x66</span>,</span><br><span class="line">        <span class="number">0xB5</span>, <span class="number">0x39</span>, <span class="number">0xB9</span>, <span class="number">0xE8</span>, <span class="number">0xAA</span>, <span class="number">0xA7</span>, <span class="number">0x4C</span>, <span class="number">0x6A</span>, <span class="number">0xE3</span>, <span class="number">0x4C</span>, <span class="number">0x55</span>, <span class="number">0x43</span>, <span class="number">0x0C</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0xBF</span>,</span><br><span class="line">        <span class="number">0x63</span>, <span class="number">0x07</span>, <span class="number">0xF9</span>, <span class="number">0xE2</span>, <span class="number">0xDF</span>, <span class="number">0xF3</span>, <span class="number">0xF5</span>, <span class="number">0xFD</span>, <span class="number">0x6A</span>, <span class="number">0x3C</span>, <span class="number">0x00</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    srand(<span class="number">0x3419</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> decrypted[<span class="keyword">sizeof</span>(encrypted)];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(encrypted); i++) {</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> key = rand();    </span><br><span class="line">        <span class="type">char</span> byte_key = key ; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        decrypted[i] = encrypted[i] ^ byte_key;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Decrypted Data (%zu bytes):\n"</span>, <span class="keyword">sizeof</span>(decrypted));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(decrypted); i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>, decrypted[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    FILE* fp = fopen(<span class="string">"decrypted.bin"</span>, <span class="string">"wb"</span>);</span><br><span class="line">    fwrite(decrypted, <span class="number">1</span>, <span class="keyword">sizeof</span>(decrypted), fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>得到二进制文件，再将其拖进cutter观察其逻辑</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20005054.png" alt="Test"></p>
<p>发现是将uStack_10作为密钥异或栈上存储的值并与用户输入值进行比较，按照地址顺序解密可得</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">encrypted = [</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x0f</span>, <span class="number">0x15</span>, <span class="number">0x01</span>, <span class="number">0x1d</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x56</span>, <span class="number">0x15</span>, <span class="number">0x52</span>, <span class="number">0x03</span>, <span class="number">0x39</span>, <span class="number">0x35</span>, <span class="number">0x52</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x59</span>, <span class="number">0x11</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x67</span>]</span><br><span class="line">flag = <span class="built_in">bytes</span>([encrypted[i] ^ key[i % <span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)])</span><br><span class="line"><span class="built_in">print</span>(flag.decode(errors=<span class="string">'ignore'</span>))  </span><br><span class="line"></span><br><span class="line"><span class="comment">#wctf{Ann0y3d_Y3t?}</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h3><p>一道很有意思的题目</p>
<p>首先拖进IDA审计代码,发现程序一开始调用了urandom给byte_4040A9赋了一个随机值,同时把这个值也赋给byte_4040AA。</p>
<p>然后进入打工环节。余额储存在dword_404080,每天的初始工资储存在dword_404084。</p>
<p>主要有三个功能1，2，3，1是调用sub_4011C6，这是最关键的函数，通过将byte_4040AA与byte_404088到byte_40408E之间的7个字节按位与，如果不为0则输出一些语句，可以通过这些输出来确定byte_4040AA的一些位,最后会将byte_4040AA与新余额异或并赋值给自己。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20002815.png" alt="Test"></p>
<p>2是改变自己的工资。3是辞职并且判断257 * (unsigned __int8)byte_4040A9 == dword_404080,如果成立则输出flag。</p>
<p>观察2进制文件得到余额的初始值是1337，工资的初始值是10</p>
<p>byte_404088到byte_40408E的字节分别是</p>
<blockquote>
<p>0000 1010</p>
<p>0001 0110</p>
<p>0001 1000</p>
<p>0010 1000</p>
<p>1010 1000</p>
<p>0110 0000</p>
<p>0000 0001</p>
</blockquote>
<p>接下来我们可以通过不断的调用函数1来获取输出，目的是获取初始的byte_4040AA，进而获取byte_4040A9。</p>
<p>因为所有过程都是可以预知的，并且按理来说方程是无限的，一定可以解出byte_4040AA</p>
<p>进入实战，我挑选了一次运气比较好的初始值使得我可以仅通过一次调用就获取byte_4040AA</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20003011.png" alt="Test"></p>
<p>可以看到只有三条语句输出，这已经可以确定byte_4040AA的所有位，即0100 0101</p>
<p>那么(unsigned __int8)byte_4040A9即为69</p>
<p>则我们让余额涨到257*69=17733即可，计算出还差16386，改变工资后再工作一天，辞职结束!</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-23%20003347.png" alt="Test"></p>
<h3 id="AngerIssues"><a href="#AngerIssues" class="headerlink" title="AngerIssues"></a>AngerIssues</h3><p>拖入ida初步查看，可以看到main函数调用了checks函数，而checks函数调用了一堆funci函数。</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20163818.png" alt="Test"></p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20163827.png" alt="Test"></p>
<p>且每个函数都执行一些简单的比较功能</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20163108.png" alt="Test"></p>
<p>显然不能手动分析，使用自动分析工具angr</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">"./angerissue"</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_size = <span class="number">60</span>  </span><br><span class="line">flag_chars = [claripy.BVS(<span class="string">f'flag_<span class="subst">{i}</span>'</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(input_size)]</span><br><span class="line">flag = claripy.Concat(*flag_chars + [claripy.BVV(<span class="string">b'\n'</span>)]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">state = proj.factory.full_init_state(</span><br><span class="line">    args=[<span class="string">"./program"</span>],</span><br><span class="line">    stdin=flag</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag_chars:</span><br><span class="line">    state.solver.add(c &gt;= <span class="number">0x20</span>, c &lt;= <span class="number">0x7E</span>)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">simgr = proj.factory.simulation_manager(state)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b"Yay! You did it!"</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">simgr.explore(find=is_successful)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    solution_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">    solution = solution_state.solver.<span class="built_in">eval</span>(flag, cast_to=<span class="built_in">bytes</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"[+] Found solution: <span class="subst">{solution.decode()}</span>"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"[-] No solution found."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#wctf{1_h0p3_y0u_u53d_ANGR_f0r_th15_0r_y0U_w0uLd_b3_a_duMMy}</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Vinyl"><a href="#Vinyl" class="headerlink" title="Vinyl"></a>Vinyl</h3><p>一道迷宫的题目</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20164336.png" alt="Test"></p>
<p>用户输入作为迷宫的操作，sub_1C48是主要验证逻辑。而sub_1ED4是后面更新后的文件加入的函数，主要作用是限制了一些步数处的操作，防止多解。</p>
<p>先来分析主要的迷宫函数</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20165036.png" alt="Test"></p>
<p>我愿称之为“双面重力迷宫”。不妨假设有个小人在其中移动。</p>
<p>可以看到有三个坐标,dword_5020,dword_5024,dword_5028。分别对应面的编号和位置，可以将5024看作y坐标，5028看作x坐标。迷宫单面大小是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.291ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 3222.4 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(2222.4,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>  (bytes)，其中小人现在的位置用字符’X’表示，障碍用’#’表示。用户输入的每一字节按照2bits分为四组，分别对应一次操作 (可能是0,1,2,3)，一共有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.57ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 5556 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(2222.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(3000.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4056,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container> 次操作。通过分析sub_1A8A发现四种操作分别是</p>
<blockquote>
<p>3: RL 背面顺时针旋转（迷宫本身），当前面逆时针旋转（迷宫本身），小人不翻面且坐标跟随着一块旋转。</p>
<p>2: VF 正面和背面的上下翻转（迷宫本身），小人翻面且坐标上下翻转</p>
<p>1: HF  迷宫本身不动，小人翻面且坐标左右翻转</p>
<p>0: RR 当前面顺时针旋转（迷宫本身），背面逆时针旋转（迷宫本身），小人不翻面且坐标跟随着一块旋转。</p>
</blockquote>
<p>做完这些操作之后后面都要跟上一步“重力作用”，即y坐标一直增加直到遇见障碍物。</p>
<p>迷宫构造大致如下（有点吓人）</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20171511.png" alt="Test"></p>
<p>接下来正式进入路径寻找环节。</p>
<p>首先其实提取文件中迷宫数据可以发现除了’#’作为障碍物，’.’作为路径意外，还有‘@’，这个字符的作用在题目中其实并没有说明，但实际上是对最终走到出口的正确路径的提示。</p>
<p>同时还有一个sub_1229函数</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-25%20171920.png" alt="Test"></p>
<p>发现每走4步sub_1C48会调用一次该函数对目前的坐标进行验证，可以看作“存档点”。一共有8个（最后一个是终点）</p>
<blockquote>
<p>CHECKPOINTS = [</p>
<p>    [0, 28, 34],</p>
<p>    [0, 35, 32],</p>
<p>    [1, 26, 15],</p>
<p>    [0, 20, 33],</p>
<p>    [1, 31, 17],</p>
<p>    [0, 60, 89],</p>
<p>    [0, 46, 51],</p>
<p>    [0, 44, 85]</p>
<p>]</p>
</blockquote>
<p>在更新题目文件之前所有有用信息就到此结束了，而我当时选择的bruteforce每四个字节，却得到了多组可能路径，并且由于枚举空间确实有点大（<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container>左右），最后有点可惜没有做出来（没看discord，题目文件更新了:(</p>
<p>而之前提到的sub_1ED4函数就解决了这个问题，它直接告诉了我们flag中的许多字符，使得每两个存档点之间（4个字节）只有一个或者两个字节未知（<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.119ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 936.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container>），完全可以通过bruteforce做出来</p>
<p>接下来是我实现迷宫的C代码</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 96</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STEPS 16</span></span><br><span class="line"><span class="type">int</span> state[<span class="number">3</span>] = { <span class="number">0</span>,<span class="number">48</span>,<span class="number">48</span> };<span class="comment">//初始状态</span></span><br><span class="line"><span class="type">int</span> state_copy[<span class="number">3</span>] = { <span class="number">0</span> };</span><br><span class="line"><span class="type">int</span> temp[<span class="number">2</span>][N * N] = { <span class="number">0</span> };</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> maze[<span class="number">2</span>][N*N] ={};<span class="comment">//迷宫数据，太大了不放进来</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//顺时针旋转90度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rotate_clockwise</span><span class="params">(<span class="type">int</span> c)</span> {</span><br><span class="line">    <span class="type">int</span> temp[N*N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            temp[j*N+N - <span class="number">1</span> - i] = maze[c][i*N+j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            maze[c][i*N+j] = temp[i*N+j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆时针旋转90度</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rotate_counterclockwise</span><span class="params">(<span class="type">int</span> c)</span> {</span><br><span class="line">    <span class="type">int</span> temp[N*N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            temp[(N - <span class="number">1</span> - j)*N+i] = maze[c][i*N+j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            maze[c][i*N+j] = temp[i*N+j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下翻转</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">flip_vertical</span><span class="params">(<span class="type">int</span> c)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N / <span class="number">2</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            <span class="type">int</span> temp = maze[c][i*N+j];</span><br><span class="line">            maze[c][i*N+j] = maze[c][(N - <span class="number">1</span> - i)*N+j];</span><br><span class="line">            maze[c][(N - <span class="number">1</span> - i)*N+j] = temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左右翻转</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">flip_horizontal</span><span class="params">(<span class="type">int</span> c)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N / <span class="number">2</span>; j++) {</span><br><span class="line">            <span class="type">int</span> temp = maze[c][i*N+j];</span><br><span class="line">            maze[c][i*N+j] = maze[c][i*N+N - <span class="number">1</span> - j];</span><br><span class="line">            maze[c][i*N+N - <span class="number">1</span> - j] = temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印矩阵</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_matrix</span><span class="params">(<span class="type">int</span> state[<span class="number">3</span>])</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">96</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">96</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (i ==state[<span class="number">1</span>] &amp;&amp; j == state[<span class="number">2</span>]) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\033[31mX\033[0m"</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (maze[state[<span class="number">0</span>]][i * <span class="number">96</span> + j] == <span class="number">35</span>) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (maze[state[<span class="number">0</span>]][i * <span class="number">96</span> + j] == <span class="number">46</span>) {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] == <span class="number">35</span>) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> choice, <span class="type">int</span> state[<span class="number">3</span>])</span> {</span><br><span class="line">    <span class="keyword">if</span> (choice == <span class="number">0</span>) {</span><br><span class="line">        rotate_clockwise(state[<span class="number">0</span>]);</span><br><span class="line">        rotate_counterclockwise(<span class="number">1</span> - state[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> temp = state[<span class="number">1</span>];</span><br><span class="line">        state[<span class="number">1</span>] = state[<span class="number">2</span>];</span><br><span class="line">        state[<span class="number">2</span>] = <span class="number">95</span> - temp;</span><br><span class="line">        <span class="keyword">while</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] != <span class="number">35</span>) {</span><br><span class="line">            state[<span class="number">1</span>]++;</span><br><span class="line">        }</span><br><span class="line">        state[<span class="number">1</span>]--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">3</span>) {</span><br><span class="line">        rotate_clockwise(<span class="number">1</span> - state[<span class="number">0</span>]);</span><br><span class="line">        rotate_counterclockwise(state[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> temp = state[<span class="number">2</span>];</span><br><span class="line">        state[<span class="number">2</span>] = state[<span class="number">1</span>];</span><br><span class="line">        state[<span class="number">1</span>] = <span class="number">95</span> - temp;</span><br><span class="line">        <span class="keyword">while</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] != <span class="number">35</span>) {</span><br><span class="line">            state[<span class="number">1</span>]++;</span><br><span class="line">        }</span><br><span class="line">        state[<span class="number">1</span>]--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">1</span>) {</span><br><span class="line">        state[<span class="number">0</span>] = <span class="number">1</span> - state[<span class="number">0</span>];</span><br><span class="line">        state[<span class="number">2</span>] = <span class="number">95</span> - state[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">while</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] != <span class="number">35</span>) {</span><br><span class="line">            state[<span class="number">1</span>]++;</span><br><span class="line">        }</span><br><span class="line">        state[<span class="number">1</span>]--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>) {</span><br><span class="line">        flip_vertical(state[<span class="number">0</span>]);</span><br><span class="line">        flip_vertical(<span class="number">1</span> - state[<span class="number">0</span>]);</span><br><span class="line">        state[<span class="number">0</span>] = <span class="number">1</span> - state[<span class="number">0</span>];</span><br><span class="line">        state[<span class="number">1</span>] = <span class="number">95</span> - state[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] != <span class="number">35</span>) {</span><br><span class="line">            state[<span class="number">1</span>]++;</span><br><span class="line">        }</span><br><span class="line">        state[<span class="number">1</span>]--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (maze[state[<span class="number">0</span>]][state[<span class="number">1</span>] * <span class="number">96</span> + state[<span class="number">2</span>]] == <span class="number">35</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">func_num</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">    <span class="keyword">if</span> (func(num &gt;&gt; <span class="number">6</span>, state) || func((num &lt;&lt; <span class="number">2</span>) % <span class="number">256</span> &gt;&gt; <span class="number">6</span>, state) || func((num &lt;&lt; <span class="number">4</span>) % <span class="number">256</span> &gt;&gt; <span class="number">6</span>, state) || func((num &lt;&lt; <span class="number">6</span>) % <span class="number">256</span> &gt;&gt; <span class="number">6</span>, state)) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">brute_force_maze</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">32</span>; i &lt; <span class="number">128</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">32</span>; j &lt; <span class="number">128</span>; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">                    maze[<span class="number">0</span>][i * N + j] = temp[<span class="number">0</span>][i * N + j];</span><br><span class="line">                    maze[<span class="number">1</span>][i * N + j] = temp[<span class="number">1</span>][i * N + j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">                state[i] = state_copy[i];</span><br><span class="line">            }</span><br><span class="line">            func_num(<span class="number">49</span>);</span><br><span class="line">            func_num(i);</span><br><span class="line">            func_num(<span class="number">49</span>);</span><br><span class="line">            func_num(j);</span><br><span class="line">            <span class="keyword">if</span> (state[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; state[<span class="number">1</span>] == <span class="number">20</span> &amp;&amp; state[<span class="number">2</span>] == <span class="number">33</span>) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c %c %c %c\n"</span>,<span class="number">49</span>,i,<span class="number">49</span>, j);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"end"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    <span class="comment">//print_matrix(state);</span></span><br><span class="line">    <span class="type">int</span> test[] = {<span class="string">'w'</span>,<span class="string">'c'</span>,<span class="string">'t'</span>,<span class="string">'f'</span>,<span class="string">'{'</span>,<span class="string">'$'</span>,<span class="string">'c'</span>,<span class="string">'r'</span>,<span class="string">'@'</span>,<span class="string">'t'</span>,<span class="string">'c'</span>,<span class="string">'H'</span>};</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) {</span><br><span class="line">        func_num(test[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) {</span><br><span class="line">            temp[<span class="number">0</span>][i * N + j] = maze[<span class="number">0</span>][i * N + j];</span><br><span class="line">            temp[<span class="number">1</span>][i * N + j] = maze[<span class="number">1</span>][i * N + j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">        state_copy[i] = state[i];</span><br><span class="line">    }</span><br><span class="line">    brute_force_maze();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//运行结果： 1 - 1 ;</span></span><br></pre></td></tr></table></figure></div>

<p>然后直接对每两个存档点之间暴力枚举即可（例如以上就是枚举第3-4个存档点之间字节）</p>
<p>最终得到wctf{$cr@tcH1-1;K3-4-1337~c47-2}</p>
]]></content>
      <tags>
        <tag>reverse</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
</search>
